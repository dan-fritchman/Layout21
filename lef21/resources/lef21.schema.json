{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Lef Library",
  "description": "LEF's primary design-content container, including a set of macro/cell definitions and associated metadata.",
  "type": "object",
  "required": [
    "extensions",
    "fixed_mask"
  ],
  "properties": {
    "bus_bit_chars": {
      "description": "Bus-Bit Separator Characters",
      "type": [
        "array",
        "null"
      ],
      "items": [
        {
          "type": "string",
          "maxLength": 1,
          "minLength": 1
        },
        {
          "type": "string",
          "maxLength": 1,
          "minLength": 1
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "clearance_measure": {
      "description": "Clearance Measure",
      "anyOf": [
        {
          "$ref": "#/definitions/LefClearanceStyle"
        },
        {
          "type": "null"
        }
      ]
    },
    "divider_char": {
      "description": "Divider Character",
      "type": [
        "string",
        "null"
      ],
      "maxLength": 1,
      "minLength": 1
    },
    "extensions": {
      "description": "Syntax Extensions (Unsupported)",
      "writeOnly": true,
      "type": "array",
      "items": {
        "$ref": "#/definitions/LefExtension"
      }
    },
    "fixed_mask": {
      "writeOnly": true,
      "type": "boolean"
    },
    "layers": {
      "description": "Layer Definitions",
      "writeOnly": true,
      "anyOf": [
        {
          "$ref": "#/definitions/Unsupported"
        },
        {
          "type": "null"
        }
      ]
    },
    "macros": {
      "description": "Macro Definitions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LefMacro"
      }
    },
    "manufacturing_grid": {
      "description": "Manufacturing Grid",
      "type": [
        "string",
        "null"
      ],
      "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
    },
    "max_via_stack": {
      "description": "Max Via Stack",
      "writeOnly": true,
      "anyOf": [
        {
          "$ref": "#/definitions/Unsupported"
        },
        {
          "type": "null"
        }
      ]
    },
    "names_case_sensitive": {
      "description": "Case-Sensitive Name Setting Valid for LEF versions 5.4 and earlier",
      "anyOf": [
        {
          "$ref": "#/definitions/LefOnOff"
        },
        {
          "type": "null"
        }
      ]
    },
    "no_wire_extension_at_pin": {
      "description": "Wire-Extension Pin Settings Valid for LEF versions 5.4 and earlier",
      "anyOf": [
        {
          "$ref": "#/definitions/LefOnOff"
        },
        {
          "type": "null"
        }
      ]
    },
    "non_default_rules": {
      "description": "Non Default Rules",
      "writeOnly": true,
      "anyOf": [
        {
          "$ref": "#/definitions/Unsupported"
        },
        {
          "type": "null"
        }
      ]
    },
    "property_definitions": {
      "description": "Property Definitions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LefPropertyDefinition"
      }
    },
    "sites": {
      "description": "Site Definitions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LefSite"
      }
    },
    "units": {
      "description": "Dimensional Units Recommended to be specified in a tech-lef. But turns up in libraries as well.",
      "anyOf": [
        {
          "$ref": "#/definitions/LefUnits"
        },
        {
          "type": "null"
        }
      ]
    },
    "use_min_spacing": {
      "description": "\"Use Min Spacing\" Option",
      "anyOf": [
        {
          "$ref": "#/definitions/LefOnOff"
        },
        {
          "type": "null"
        }
      ]
    },
    "version": {
      "description": "Lef Spec Version",
      "type": [
        "string",
        "null"
      ],
      "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
    },
    "via_rule_generators": {
      "description": "Via Rules Generators",
      "writeOnly": true,
      "anyOf": [
        {
          "$ref": "#/definitions/Unsupported"
        },
        {
          "type": "null"
        }
      ]
    },
    "via_rules": {
      "description": "Via Rules",
      "writeOnly": true,
      "anyOf": [
        {
          "$ref": "#/definitions/Unsupported"
        },
        {
          "type": "null"
        }
      ]
    },
    "vias": {
      "description": "Via Definitions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LefViaDef"
      }
    }
  },
  "definitions": {
    "LefAntennaModel": {
      "description": "Antenna Models",
      "oneOf": [
        {
          "description": "OXIDE1",
          "type": "string",
          "enum": [
            "Oxide1"
          ]
        },
        {
          "description": "OXIDE2",
          "type": "string",
          "enum": [
            "Oxide2"
          ]
        },
        {
          "description": "OXIDE3",
          "type": "string",
          "enum": [
            "Oxide3"
          ]
        },
        {
          "description": "OXIDE4",
          "type": "string",
          "enum": [
            "Oxide4"
          ]
        }
      ]
    },
    "LefBlockClassType": {
      "description": "Sub-Types for Macros of Class [LefMacroClass::Block]",
      "oneOf": [
        {
          "description": "BLACKBOX",
          "type": "string",
          "enum": [
            "BlackBox"
          ]
        },
        {
          "description": "SOFT",
          "type": "string",
          "enum": [
            "Soft"
          ]
        }
      ]
    },
    "LefClearanceStyle": {
      "description": "Clearance Measure Spacing Styles",
      "oneOf": [
        {
          "description": "MAXXY",
          "type": "string",
          "enum": [
            "MaxXY"
          ]
        },
        {
          "description": "EUCLIDEAN",
          "type": "string",
          "enum": [
            "Euclidean"
          ]
        }
      ]
    },
    "LefCoreClassType": {
      "description": "Sub-Types for Macros of Class [LefMacroClass::Core]",
      "oneOf": [
        {
          "description": "FEEDTHRU",
          "type": "string",
          "enum": [
            "FeedThru"
          ]
        },
        {
          "description": "TIEHIGH",
          "type": "string",
          "enum": [
            "TieHigh"
          ]
        },
        {
          "description": "TIELOW",
          "type": "string",
          "enum": [
            "TieLow"
          ]
        },
        {
          "description": "SPACER",
          "type": "string",
          "enum": [
            "Spacer"
          ]
        },
        {
          "description": "ANTENNACELL",
          "type": "string",
          "enum": [
            "AntennaCell"
          ]
        },
        {
          "description": "WELLTAP",
          "type": "string",
          "enum": [
            "WellTap"
          ]
        }
      ]
    },
    "LefDbuPerMicron": {
      "title": "Lef Distance Units per Micron",
      "description": "A constrained numeric type. Allowed values of [LefDbuPerMicron] are: [100, 200, 400, 800, 1000, 2000, 4000, 8000, 10_000, 20_000]. Adherence to this set is checked at construction time.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "LefDefSource": {
      "title": "Lef/ Def `SOURCE`",
      "description": "Specifies the source of a component In all versions since at least 5.7 (2009), SOURCE is a DEF-only field on COMPONENT definitions. Prior versions also include this as a field for LEF MACRO definitions.",
      "oneOf": [
        {
          "description": "NETLIST",
          "type": "string",
          "enum": [
            "Netlist"
          ]
        },
        {
          "description": "DIST",
          "type": "string",
          "enum": [
            "Dist"
          ]
        },
        {
          "description": "TIMING",
          "type": "string",
          "enum": [
            "Timing"
          ]
        },
        {
          "description": "USER",
          "type": "string",
          "enum": [
            "User"
          ]
        }
      ]
    },
    "LefDensityGeometries": {
      "title": "Lef Density Geometry Store",
      "description": "Most LEF spatial data (e.g. ports, blockages) is organized by layer. [LefDensityGeometries] stores the combination of a layer (name) and a suite of rectangle density data on that layer.\n\n[LefDensityGeometries] are the primary building block of [LefDensity].",
      "type": "object",
      "required": [
        "layer_name"
      ],
      "properties": {
        "geometries": {
          "description": "Geometries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefDensityRectangle"
          }
        },
        "layer_name": {
          "description": "Layer Name",
          "type": "string"
        }
      }
    },
    "LefDensityRectangle": {
      "title": "Lef Density Rectangle",
      "description": "Defined as a rectangle with a numeric density value.  One or more of these geometries are associated with a layer name in [LefDensityGeometries]",
      "type": "object",
      "required": [
        "density_value",
        "pt1",
        "pt2"
      ],
      "properties": {
        "density_value": {
          "description": "Density Value",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "pt1": {
          "description": "Location",
          "allOf": [
            {
              "$ref": "#/definitions/LefPoint"
            }
          ]
        },
        "pt2": {
          "$ref": "#/definitions/LefPoint"
        }
      }
    },
    "LefEndCapClassType": {
      "description": "Sub-Types for Macros of Class [LefMacroClass::EndCap]",
      "oneOf": [
        {
          "description": "PRE",
          "type": "string",
          "enum": [
            "Pre"
          ]
        },
        {
          "description": "POST",
          "type": "string",
          "enum": [
            "Post"
          ]
        },
        {
          "description": "TOPLEFT",
          "type": "string",
          "enum": [
            "TopLeft"
          ]
        },
        {
          "description": "TOPRIGHT",
          "type": "string",
          "enum": [
            "TopRight"
          ]
        },
        {
          "description": "BOTTOMLEFT",
          "type": "string",
          "enum": [
            "BottomLeft"
          ]
        },
        {
          "description": "BOTTOMRIGHT",
          "type": "string",
          "enum": [
            "BottomRight"
          ]
        }
      ]
    },
    "LefExtension": {
      "type": "object",
      "required": [
        "data",
        "name"
      ],
      "properties": {
        "data": {
          "description": "Stringified data contained in the extension",
          "type": "string"
        },
        "name": {
          "description": "Name of the extension",
          "type": "string"
        }
      }
    },
    "LefFixedViaDef": {
      "title": "Lef Fixed Via Definition",
      "type": "object",
      "properties": {
        "layers": {
          "description": "Layers & Geometries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefViaLayerGeometries"
          }
        },
        "resistance_ohms": {
          "description": "Resistance of the via.\n\nUsing this field is not recommended.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefForeign": {
      "title": "Lef Foreign Cell Declaration",
      "description": "Declares the linkage to another cell, commonly in DEF or GDSII format. Foreign-cell references are stored exacty as in the LEF format: as a string cell-name.",
      "type": "object",
      "required": [
        "cell_name"
      ],
      "properties": {
        "cell_name": {
          "description": "Foreign Cell Name",
          "type": "string"
        },
        "orient": {
          "description": "Orientation",
          "anyOf": [
            {
              "$ref": "#/definitions/LefOrient"
            },
            {
              "type": "null"
            }
          ]
        },
        "pt": {
          "description": "Location",
          "anyOf": [
            {
              "$ref": "#/definitions/LefPoint"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "LefGeneratedViaDef": {
      "title": "Lef Generated Via Definition",
      "type": "object",
      "required": [
        "bot_enc_x",
        "bot_enc_y",
        "bot_metal_layer",
        "cut_layer",
        "cut_size_x",
        "cut_size_y",
        "cut_spacing_x",
        "cut_spacing_y",
        "top_enc_x",
        "top_enc_y",
        "top_metal_layer",
        "via_rule_name"
      ],
      "properties": {
        "bot_enc_x": {
          "description": "Horizontal enclosure of vias by bottom metal layer.",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "bot_enc_y": {
          "description": "Vertical enclosure of vias by bottom metal layer.",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "bot_metal_layer": {
          "description": "The bottom metal layer.",
          "type": "string"
        },
        "cut_layer": {
          "description": "The cut (via) layer.",
          "type": "string"
        },
        "cut_size_x": {
          "description": "The width of the via rectangles.",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "cut_size_y": {
          "description": "The height of the via rectangles.",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "cut_spacing_x": {
          "description": "The horizontal spacing (right edge to next left edge) between cuts.",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "cut_spacing_y": {
          "description": "The vertical spacing (top edge to bottom edge of cut above) between cuts.",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "offset": {
          "description": "Offsets of top and bottom metal layers.",
          "anyOf": [
            {
              "$ref": "#/definitions/LefOffset"
            },
            {
              "type": "null"
            }
          ]
        },
        "origin": {
          "description": "The origin of the coordinate system specifying all of the via's shapes.",
          "anyOf": [
            {
              "$ref": "#/definitions/LefPoint"
            },
            {
              "type": "null"
            }
          ]
        },
        "pattern": {
          "description": "Specifies a pattern identifying which cuts are missing from the array.\n\nIn the absence of a specified pattern, all cuts are present. This field is currently unsupported.",
          "anyOf": [
            {
              "$ref": "#/definitions/Unsupported"
            },
            {
              "type": "null"
            }
          ]
        },
        "rowcol": {
          "description": "The via array's number of rows and columns.",
          "anyOf": [
            {
              "$ref": "#/definitions/LefRowCol"
            },
            {
              "type": "null"
            }
          ]
        },
        "top_enc_x": {
          "description": "Horizontal enclosure of vias by top metal layer.",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "top_enc_y": {
          "description": "Vertical enclosure of vias by top metal layer.",
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "top_metal_layer": {
          "description": "The top metal layer.",
          "type": "string"
        },
        "via_rule_name": {
          "description": "The name of the VIARULE.\n\nMust refer to a previously defined VIARULE GENERATE statement.",
          "type": "string"
        }
      }
    },
    "LefGeometry": {
      "title": "Lef Geometric Object Enumeration",
      "description": "Includes [LefShape]s and Iterators thereof",
      "oneOf": [
        {
          "description": "Single Shape",
          "type": "object",
          "required": [
            "Shape"
          ],
          "properties": {
            "Shape": {
              "$ref": "#/definitions/LefShape"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Repeated Iteration/ Array of Shapes (Unsupported)",
          "type": "object",
          "required": [
            "Iterate"
          ],
          "properties": {
            "Iterate": {
              "type": "object",
              "required": [
                "pattern",
                "shape"
              ],
              "properties": {
                "pattern": {
                  "$ref": "#/definitions/LefStepPattern"
                },
                "shape": {
                  "$ref": "#/definitions/LefShape"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LefLayerGeometries": {
      "title": "Lef Single-Layer Geometry Store",
      "description": "Most LEF spatial data (e.g. ports, blockages) is organized by layer. [LefLayerGeometries] stores the combination of a layer (name) and suite of geometric primitives (e.g. rectangles, polygons) and vias on that layer.\n\n[LefLayerGeometries] are the primary building block of [LefPort]s and macro obstructions.",
      "type": "object",
      "required": [
        "layer_name"
      ],
      "properties": {
        "except_pg_net": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "geometries": {
          "description": "Geometries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefGeometry"
          }
        },
        "layer_name": {
          "description": "Layer Name",
          "type": "string"
        },
        "spacing": {
          "anyOf": [
            {
              "$ref": "#/definitions/LefLayerSpacing"
            },
            {
              "type": "null"
            }
          ]
        },
        "vias": {
          "description": "Vias",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefVia"
          }
        },
        "width": {
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefLayerSpacing": {
      "title": "Enumerated Layer-Spacing Options",
      "description": "Includes absolute spacing and design-rule-width modifiers.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Spacing"
          ],
          "properties": {
            "Spacing": {
              "type": "string",
              "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "DesignRuleWidth"
          ],
          "properties": {
            "DesignRuleWidth": {
              "type": "string",
              "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LefMacro": {
      "title": "Lef Macro",
      "description": "The primary block-level construct comprising each [LefLibrary]. Defines a hardware-block's physical abstract, including: * Pin definitions (`pins`) with locations, directions, and associated metadata * Required blockage-obstructions (`obs`) * A variety of other block-level metadata",
      "type": "object",
      "required": [
        "fixed_mask",
        "name"
      ],
      "properties": {
        "class": {
          "description": "Macro Class",
          "anyOf": [
            {
              "$ref": "#/definitions/LefMacroClass"
            },
            {
              "type": "null"
            }
          ]
        },
        "density": {
          "description": "Density Objects",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/LefDensityGeometries"
          }
        },
        "eeq": {
          "description": "Electrically-Equivalent Cell",
          "type": [
            "string",
            "null"
          ]
        },
        "fixed_mask": {
          "writeOnly": true,
          "type": "boolean"
        },
        "foreign": {
          "description": "Foreign (i.e. GDSII, DEF) Cell",
          "anyOf": [
            {
              "$ref": "#/definitions/LefForeign"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "description": "Macro Name",
          "type": "string"
        },
        "obs": {
          "description": "Obstructions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefLayerGeometries"
          }
        },
        "origin": {
          "description": "X-Y Origin",
          "anyOf": [
            {
              "$ref": "#/definitions/LefPoint"
            },
            {
              "type": "null"
            }
          ]
        },
        "pins": {
          "description": "Pin List",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefPin"
          }
        },
        "properties": {
          "description": "Properties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefProperty"
          }
        },
        "site": {
          "description": "Site Name Note the optional `SITEPATTERN` is not supported",
          "type": [
            "string",
            "null"
          ]
        },
        "size": {
          "description": "Outline Size",
          "type": [
            "array",
            "null"
          ],
          "items": [
            {
              "type": "string",
              "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
            },
            {
              "type": "string",
              "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "source": {
          "description": "Source Valid for LEF versions 5.4 and earlier",
          "anyOf": [
            {
              "$ref": "#/definitions/LefDefSource"
            },
            {
              "type": "null"
            }
          ]
        },
        "symmetry": {
          "description": "Rotational & Translation Symmetries",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/LefSymmetry"
          }
        }
      }
    },
    "LefMacroClass": {
      "title": "[LefMacro] Classes",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Ring"
          ]
        },
        {
          "type": "object",
          "required": [
            "Cover"
          ],
          "properties": {
            "Cover": {
              "type": "object",
              "required": [
                "bump"
              ],
              "properties": {
                "bump": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Block"
          ],
          "properties": {
            "Block": {
              "type": "object",
              "properties": {
                "tp": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefBlockClassType"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Pad"
          ],
          "properties": {
            "Pad": {
              "type": "object",
              "properties": {
                "tp": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefPadClassType"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Core"
          ],
          "properties": {
            "Core": {
              "type": "object",
              "properties": {
                "tp": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefCoreClassType"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "EndCap"
          ],
          "properties": {
            "EndCap": {
              "type": "object",
              "required": [
                "tp"
              ],
              "properties": {
                "tp": {
                  "$ref": "#/definitions/LefEndCapClassType"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LefMask": {
      "title": "Mask value",
      "description": "Specifies which mask from double- or triple-patterning to use for this shape. Supports common mathematical operations (Add, Sub, increment, etc.).",
      "type": "object",
      "required": [
        "mask"
      ],
      "properties": {
        "mask": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefOffset": {
      "title": "Lef Offset",
      "type": "object",
      "required": [
        "bot_x",
        "bot_y",
        "top_x",
        "top_y"
      ],
      "properties": {
        "bot_x": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "bot_y": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "top_x": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "top_y": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefOnOff": {
      "description": "Binary On/Off Settings, Denoted by `ON` and `OFF`",
      "oneOf": [
        {
          "description": "ON",
          "type": "string",
          "enum": [
            "On"
          ]
        },
        {
          "description": "OFF",
          "type": "string",
          "enum": [
            "Off"
          ]
        }
      ]
    },
    "LefOrient": {
      "description": "Specifies orientation for FOREIGN statement",
      "oneOf": [
        {
          "description": "N",
          "type": "string",
          "enum": [
            "N"
          ]
        },
        {
          "description": "S",
          "type": "string",
          "enum": [
            "S"
          ]
        },
        {
          "description": "E",
          "type": "string",
          "enum": [
            "E"
          ]
        },
        {
          "description": "W",
          "type": "string",
          "enum": [
            "W"
          ]
        },
        {
          "description": "FN",
          "type": "string",
          "enum": [
            "FN"
          ]
        },
        {
          "description": "FS",
          "type": "string",
          "enum": [
            "FS"
          ]
        },
        {
          "description": "FE",
          "type": "string",
          "enum": [
            "FE"
          ]
        },
        {
          "description": "FW",
          "type": "string",
          "enum": [
            "FW"
          ]
        }
      ]
    },
    "LefPadClassType": {
      "description": "Sub-Types for Macros of Class [LefMacroClass::Pad]",
      "oneOf": [
        {
          "description": "INPUT",
          "type": "string",
          "enum": [
            "Input"
          ]
        },
        {
          "description": "OUTPUT",
          "type": "string",
          "enum": [
            "Output"
          ]
        },
        {
          "description": "INOUT",
          "type": "string",
          "enum": [
            "Inout"
          ]
        },
        {
          "description": "POWER",
          "type": "string",
          "enum": [
            "Power"
          ]
        },
        {
          "description": "SPACER",
          "type": "string",
          "enum": [
            "Spacer"
          ]
        },
        {
          "description": "AREAIO",
          "type": "string",
          "enum": [
            "AreaIo"
          ]
        }
      ]
    },
    "LefPin": {
      "title": "Lef Pin Definition",
      "description": "A named, directed pin, including one or more \"weakly connected\" physical [LefPort]s.",
      "type": "object",
      "required": [
        "name",
        "ports"
      ],
      "properties": {
        "antenna_attrs": {
          "description": "Antenna Attributes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefPinAntennaAttr"
          }
        },
        "antenna_model": {
          "description": "Antenna Model",
          "anyOf": [
            {
              "$ref": "#/definitions/LefAntennaModel"
            },
            {
              "type": "null"
            }
          ]
        },
        "direction": {
          "description": "Direction",
          "anyOf": [
            {
              "$ref": "#/definitions/LefPinDirection"
            },
            {
              "type": "null"
            }
          ]
        },
        "ground_sensitivity": {
          "description": "Ground Sensitivity",
          "type": [
            "string",
            "null"
          ]
        },
        "must_join": {
          "description": "Must-Join",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "Pin Name",
          "type": "string"
        },
        "net_expr": {
          "description": "Net Expression",
          "type": [
            "string",
            "null"
          ]
        },
        "ports": {
          "description": "Port Geometries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefPort"
          }
        },
        "properties": {
          "description": "Properties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefProperty"
          }
        },
        "shape": {
          "description": "Shape",
          "anyOf": [
            {
              "$ref": "#/definitions/LefPinShape"
            },
            {
              "type": "null"
            }
          ]
        },
        "supply_sensitivity": {
          "description": "Supply Sensitivity",
          "type": [
            "string",
            "null"
          ]
        },
        "taper_rule": {
          "description": "Taper Rule",
          "type": [
            "string",
            "null"
          ]
        },
        "use": {
          "description": "Usage / Role",
          "anyOf": [
            {
              "$ref": "#/definitions/LefPinUse"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "LefPinAntennaAttr": {
      "title": "Lef Antenna Attributes",
      "description": "Stored as key-value pairs from string-keys named \"ANTENNA*\" to [LefDecimal] values. Note each pair may have an optional `layer` specifier, and that each key may have multiple attributes, generally specifying different layers.",
      "type": "object",
      "required": [
        "key",
        "val"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "layer": {
          "type": [
            "string",
            "null"
          ]
        },
        "val": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefPinDirection": {
      "title": "Lef Pin Direction",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Input",
            "Inout",
            "FeedThru"
          ]
        },
        {
          "type": "object",
          "required": [
            "Output"
          ],
          "properties": {
            "Output": {
              "type": "object",
              "required": [
                "tristate"
              ],
              "properties": {
                "tristate": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LefPinShape": {
      "description": "Specifies a pin with special connection requirements because of its shape",
      "oneOf": [
        {
          "description": "ABUTMENT",
          "type": "string",
          "enum": [
            "Abutment"
          ]
        },
        {
          "description": "RING",
          "type": "string",
          "enum": [
            "Ring"
          ]
        },
        {
          "description": "FEEDTHRU",
          "type": "string",
          "enum": [
            "FeedThru"
          ]
        }
      ]
    },
    "LefPinUse": {
      "title": "Lef Pin-Usage",
      "description": "Specifies the usage-intent for a [LefPin]. Note this is the noun form of \"use\", pronounced with the hard \"s\" - not the verb form pronounced like the New Jersey second-person plural \"yous\".",
      "oneOf": [
        {
          "description": "SIGNAL",
          "type": "string",
          "enum": [
            "Signal"
          ]
        },
        {
          "description": "ANALOG",
          "type": "string",
          "enum": [
            "Analog"
          ]
        },
        {
          "description": "POWER",
          "type": "string",
          "enum": [
            "Power"
          ]
        },
        {
          "description": "GROUND",
          "type": "string",
          "enum": [
            "Ground"
          ]
        },
        {
          "description": "CLOCK",
          "type": "string",
          "enum": [
            "Clock"
          ]
        }
      ]
    },
    "LefPoint": {
      "title": "Lef X-Y Spatial Point",
      "description": "Specified in [LefDecimal]-valued Cartesian coordinates. Supports common mathematical operations (Add, Sub, increment, etc.).",
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "properties": {
        "x": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "y": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefPort": {
      "title": "Lef Port",
      "description": "Defines the physical locations and optional metadata of a port on a pin. LEF includes the notion of multiple \"weakly connected\" ports per pin; each [LefPort] is one such weakly-connected point.",
      "type": "object",
      "properties": {
        "class": {
          "description": "Port-Class",
          "anyOf": [
            {
              "$ref": "#/definitions/LefPortClass"
            },
            {
              "type": "null"
            }
          ]
        },
        "layers": {
          "description": "Layers & Geometries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefLayerGeometries"
          }
        }
      }
    },
    "LefPortClass": {
      "description": "Sub-Types for Macros of Class [LefMacroClass::Core]",
      "oneOf": [
        {
          "description": "NONE",
          "type": "string",
          "enum": [
            "None"
          ]
        },
        {
          "description": "CORE",
          "type": "string",
          "enum": [
            "Core"
          ]
        },
        {
          "description": "BUMP",
          "type": "string",
          "enum": [
            "Bump"
          ]
        }
      ]
    },
    "LefProperty": {
      "title": "User Defined Property Instantiation",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "LefPropertyDefinition": {
      "title": "User Defined Property Definition",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "LefString"
          ],
          "properties": {
            "LefString": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/LefPropertyDefinitionObjectType"
                },
                {
                  "type": "string"
                },
                {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "LefReal"
          ],
          "properties": {
            "LefReal": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/LefPropertyDefinitionObjectType"
                },
                {
                  "type": "string"
                },
                {
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
                },
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefPropertyRange"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              ],
              "maxItems": 4,
              "minItems": 4
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "LefInteger"
          ],
          "properties": {
            "LefInteger": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/LefPropertyDefinitionObjectType"
                },
                {
                  "type": "string"
                },
                {
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
                },
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefPropertyRange"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              ],
              "maxItems": 4,
              "minItems": 4
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LefPropertyDefinitionObjectType": {
      "description": "Valid object types for [LefPropertyDefinition]",
      "oneOf": [
        {
          "description": "LAYER",
          "type": "string",
          "enum": [
            "Layer"
          ]
        },
        {
          "description": "LIBRARY",
          "type": "string",
          "enum": [
            "Library"
          ]
        },
        {
          "description": "MACRO",
          "type": "string",
          "enum": [
            "Macro"
          ]
        },
        {
          "description": "NONDEFAULTRULE",
          "type": "string",
          "enum": [
            "NonDefaultRule"
          ]
        },
        {
          "description": "PIN",
          "type": "string",
          "enum": [
            "Pin"
          ]
        },
        {
          "description": "VIA",
          "type": "string",
          "enum": [
            "Via"
          ]
        },
        {
          "description": "VIARULE",
          "type": "string",
          "enum": [
            "ViaRule"
          ]
        }
      ]
    },
    "LefPropertyRange": {
      "title": "Numeric Range for [LefPropertyDefinition]",
      "type": "object",
      "required": [
        "begin",
        "end"
      ],
      "properties": {
        "begin": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "end": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefRowCol": {
      "title": "Lef Row and Column",
      "type": "object",
      "required": [
        "cols",
        "rows"
      ],
      "properties": {
        "cols": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "rows": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefShape": {
      "title": "Lef Shape Enumeration",
      "description": "Includes each of LEF's individual geometric primitives: rectangles, polygons, and paths.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Rect"
          ],
          "properties": {
            "Rect": {
              "type": "array",
              "items": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefMask"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                {
                  "$ref": "#/definitions/LefPoint"
                },
                {
                  "$ref": "#/definitions/LefPoint"
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Polygon"
          ],
          "properties": {
            "Polygon": {
              "type": "array",
              "items": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefMask"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LefPoint"
                  }
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Path"
          ],
          "properties": {
            "Path": {
              "type": "array",
              "items": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefMask"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LefPoint"
                  }
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LefSite": {
      "title": "Lef Site Definition",
      "description": "Defines a placement-site in designs. Dictates the placement grid for a family of macros.",
      "type": "object",
      "required": [
        "class",
        "name",
        "size"
      ],
      "properties": {
        "class": {
          "description": "Site Class",
          "allOf": [
            {
              "$ref": "#/definitions/LefSiteClass"
            }
          ]
        },
        "name": {
          "description": "Site Name",
          "type": "string"
        },
        "row_pattern": {
          "description": "Row Patterns, re other previously defined sites (Unsupported)",
          "writeOnly": true,
          "anyOf": [
            {
              "$ref": "#/definitions/Unsupported"
            },
            {
              "type": "null"
            }
          ]
        },
        "size": {
          "description": "Size",
          "type": "array",
          "items": [
            {
              "type": "string",
              "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
            },
            {
              "type": "string",
              "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "symmetry": {
          "description": "Rotational & Translation Symmetries",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/LefSymmetry"
          }
        }
      }
    },
    "LefSiteClass": {
      "description": "[LefSite] Classes",
      "oneOf": [
        {
          "description": "PAD",
          "type": "string",
          "enum": [
            "Pad"
          ]
        },
        {
          "description": "CORE",
          "type": "string",
          "enum": [
            "Core"
          ]
        }
      ]
    },
    "LefStepPattern": {
      "title": "Lef Step Pattern for ITERATE",
      "type": "object",
      "required": [
        "numx",
        "numy",
        "spacex",
        "spacey"
      ],
      "properties": {
        "numx": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "numy": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "spacex": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "spacey": {
          "type": "string",
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefSymmetry": {
      "description": "Specifies which MACRO orientations are valid for placement",
      "oneOf": [
        {
          "description": "X",
          "type": "string",
          "enum": [
            "X"
          ]
        },
        {
          "description": "Y",
          "type": "string",
          "enum": [
            "Y"
          ]
        },
        {
          "description": "R90",
          "type": "string",
          "enum": [
            "R90"
          ]
        }
      ]
    },
    "LefUnits": {
      "title": "Lef Physical-Dimension Units",
      "description": "Conversion factors for a variety of physical quantities.",
      "type": "object",
      "properties": {
        "capacitance_pf": {
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "current_ma": {
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "database_microns": {
          "description": "Database Distance Units per Micron Defaults to 100, i.e. 1 DBU = 10nm",
          "anyOf": [
            {
              "$ref": "#/definitions/LefDbuPerMicron"
            },
            {
              "type": "null"
            }
          ]
        },
        "frequency_mhz": {
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "power_mw": {
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "resistance_ohms": {
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "time_ns": {
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        },
        "voltage_volts": {
          "type": [
            "string",
            "null"
          ],
          "pattern": "^-?[0-9]+(\\.[0-9]+)?$"
        }
      }
    },
    "LefVia": {
      "title": "Lef Via Instance",
      "description": "A located instance of via-type `via_name`, typically used as part of a [LefLayerGeometries] definition. The via-type is generally interpreted as a string-valued <reference into tech-lef data. It is stored in each [LefVia] exactly as in LEF, as a string type-name.",
      "type": "object",
      "required": [
        "pt",
        "via_name"
      ],
      "properties": {
        "pt": {
          "description": "Location",
          "allOf": [
            {
              "$ref": "#/definitions/LefPoint"
            }
          ]
        },
        "via_name": {
          "description": "Via-Type Name",
          "type": "string"
        }
      }
    },
    "LefViaDef": {
      "title": "Lef Via Definition",
      "description": "LEF supports two kinds of vias: fixed vias and generated vias. Fixed vias contain a set of shapes (rectangles and/or polygons). Generated vias use a VIARULE statement to define via parameters.",
      "type": "object",
      "required": [
        "data",
        "name"
      ],
      "properties": {
        "data": {
          "description": "The actual content of the via definition, which may be a fixed via or a generated via.",
          "allOf": [
            {
              "$ref": "#/definitions/LefViaDefData"
            }
          ]
        },
        "default": {
          "description": "Indicates that this via is a default via for connecting a pair of metal layers.\n\nThe metal layers connected are inferrred from the via's [`LefViaLayerGeometries`], which normally contain geometry on two metal layers and one cut layer.",
          "default": false,
          "type": "boolean"
        },
        "name": {
          "description": "The name of the via.",
          "type": "string"
        },
        "properties": {
          "description": "Properties (Unsupported)",
          "writeOnly": true,
          "anyOf": [
            {
              "$ref": "#/definitions/Unsupported"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "LefViaDefData": {
      "title": "Lef Via Definition Data",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Fixed"
          ],
          "properties": {
            "Fixed": {
              "$ref": "#/definitions/LefFixedViaDef"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Generated"
          ],
          "properties": {
            "Generated": {
              "$ref": "#/definitions/LefGeneratedViaDef"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LefViaLayerGeometries": {
      "title": "Lef Single-Layer Geometry Store for Vias",
      "description": "[LefViaLayerGeometries] stores the combination of a layer (name) and suite of geometric primitives (rectangles and/or polygons) on that layer.\n\n[LefViaLayerGeometries] are the primary building block of [LefFixedViaDef]s.",
      "type": "object",
      "required": [
        "layer_name"
      ],
      "properties": {
        "layer_name": {
          "description": "Layer Name",
          "type": "string"
        },
        "shapes": {
          "description": "Geometries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LefViaShape"
          }
        }
      }
    },
    "LefViaShape": {
      "title": "Lef Via Shape Enumeration",
      "description": "These are the geometric primitives that can be included in a via definition.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Rect"
          ],
          "properties": {
            "Rect": {
              "type": "array",
              "items": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefMask"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                {
                  "$ref": "#/definitions/LefPoint"
                },
                {
                  "$ref": "#/definitions/LefPoint"
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Polygon"
          ],
          "properties": {
            "Polygon": {
              "type": "array",
              "items": [
                {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/LefMask"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LefPoint"
                  }
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Unsupported": {
      "title": "Unsupported Feature",
      "description": "Empty placeholder struct for unsupported LEF features. Primarily included for documentation purposes. Most [`Unsupported`] fields are of type [`Optional<Unsupported>`] for sake of serialization, so that they can take on the `null` value of many data formats. Setting these fields to [`Some(Unsupported)`] instead of [`None`] is largely a distinction without a difference.",
      "type": "null"
    }
  }
}